Script started on Fri Dec 13 01:00:32 2019
u306065@cse-ssh2[31]: cat 09-B-01.c
// 画像処理 量子化
// 2019/11/29 13:44
// u306065 櫛田 一樹

#include<stdio.h>
#include<stdlib.h>

const double ycbcr[3][3] = {{ 0.2990, 0.5870, 0.1140},
                        { -0.1687, -0.3313, 0.5000},
                        { 0.5000, -0.4187, -0.0813}};
const double rgb[3][3] = {{ 1.0000, 0.0000, 1.4020},
                        { 1.0000, -0.3441, -0.7141},
                        { 1.0000, 1.7720, 0.0000}};

double ycbcr_cnv[3][512][512] = {}, do_ycbcr_cnv[3] = {}, rgbio[3] = {}, rgb_cnv[3][512][512] = {};
int int_ycbcr_cnv[3] = {}, int_rgbio[3] = {}, width, height, ins;

unsigned char header[54];
unsigned char imgin[3][512][512], imgout[3][512][512];

void rgb_to_ybr();
void ybr_to_rgb();
void get_data();
void put_data();
void processing();


int main(){
    get_data();
    rgb_to_ybr();
    processing();
    ybr_to_rgb();
    put_data();
    return 0;
}

void get_data(){
    char fname[20];
    FILE *fp;
    int i;

    // ファイル名の入力
    printf("入力ファイル名を入力してください：");
    scanf("%s",fname);

    // ファイルオープン
    fp = fopen(fname, "rb");

    if(fp == NULL){
        printf("ファイルをオープンできませんでした\n");
        exit(1);
    }

    printf("ファイルをオープンしました.\n");

    // ヘッダー情報の取得
    for(int cnt = 0; cnt < 54; cnt++){
        header[cnt] = fgetc(fp);
    }


    // printf("\n<ファイルタイプ>\n");
    // for(i = 0; i < 2; i++){
    //     printf("header[%d] = %02x ", i, header[i]);
    // }
    // putchar('\n');

    printf("\n<ファイルサイズ>\n");
    for(i = 2; i < 6; i++){
        printf("header[%d] = %02x ", i, header[i]);
    }
    int filesize = *(int *)&header[2];
    printf("\n%dバイト\n", filesize);
    
    // printf("\n<予約領域>\n");
    // for(i = 6; i < 10; i++){
    //     printf("header[%d] = %02x ", i, header[i]);
    // }
    // putchar('\n');

    printf("\n<オフセット>\n");
    for(i = 10; i < 13; i++){
        printf("header[%d] = %02x ", i, header[i]);
    }
    int offset = *(int *)&header[10];
    printf("\n%dバイト\n", offset);

    // printf("\n<情報ヘッダサイズ>\n");
    // for(i = 14; i < 18; i++){
    //     printf("header[%d] = %02x ", i, header[i]);
    // }
    // putchar('\n');

    printf("\n<画像の幅>\n");
    for(i = 18; i < 22; i++){
        printf("header[%d] = %02x ", i, header[i]);
    }
    width = *(int *)&header[18];
    printf("\n%d画素\n", width);

    printf("\n<画像の高さ>\n");
    for(i = 22; i < 26; i++){
        printf("header[%d] = %02x ", i, header[i]);
    }
    height = *(int *)&header[22];
    printf("\n%dライン\n", height);

    // printf("\n<色プレーン数>\n");
    // for(i = 26; i < 28; i++){
    //     printf("header[%d] = %02x ", i, header[i]);
    // }
    // putchar('\n');
    
    printf("\n<1画素あたりのビット数>\n");
    for(i = 28; i < 30; i++){
        printf("header[%d] = %02x ", i, header[i]);
    }
    int bit = *(int *)&header[28];
    printf("\n%oビット\n", *(short *)&header[28]);
    
    // printf("\n<圧縮方式>\n");
    // for(i = 30; i < 34; i++){
    //     printf("header[%d] = %02x ", i, header[i]);
    // }
    // putchar('\n');
    
    // printf("\n<画像データサイズ>\n");
    // for(i = 34; i < 38; i++){
    //     printf("header[%d] = %02x ", i, header[i]);
    // }
    // putchar('\n');
    
    // printf("\n<水平解像度>\n");
    // for(i = 38; i < 42; i++){
    //     printf("header[%d] = %02x ", i, header[i]);
    // }
    // putchar('\n');
    
    // printf("\n<垂直解像度>\n");
    // for(i = 42; i < 46; i++){
    //     printf("header[%d] = %02x ", i, header[i]);
    // }
    // putchar('\n');
    
    // printf("\n<色数>\n");
    // for(i = 46; i < 50; i++){
    //     printf("header[%d] = %02x ", i, header[i]);
    // }
    // putchar('\n');
    
    // printf("\n<重要な色数>\n");
    // for(i = 50; i < 54; i++){
    //     printf("header[%d] = %02x ", i, header[i]);
    // }
    // putchar('\n');
    
    printf("\n<挿入ビット数>\n");
    ins = filesize - offset - width * height * (bit / 8);
    printf("%dバイト\n\n", ins);


    for(i = height - 1; i >= 0; i--){
        for(int j = 0; j < width; j++){
            for(int k = 2; k >= 0; k--){
                imgin[k][i][j] = fgetc(fp);
            }
        }
    }

    // ファイルクローズ
    fclose(fp); 
}

void rgb_to_ybr(){
    // 入力値出力
    // printf("<入力信号(RGB)>\n");
    // printf("---R---\n");
    // for(int i = 0; i < height; i++){
    //     for(int j = 0; j < width; j++){
    //         printf("%.2X ",imgin[0][i][j]);
    //     }
    //     putchar('\n');
    // }
    // printf("---G---\n");
    // for(int i = 0; i < height; i++){
    //     for(int j = 0; j < width; j++){
    //         printf("%.2X ",imgin[1][i][j]);
    //     }
    //     putchar('\n');
    // }
    // printf("---B---\n");
    // for(int i = 0; i < height; i++){
    //     for(int j = 0; j < width; j++){
    //         printf("%.2X ",imgin[2][i][j]);
    //     }
    //     putchar('\n');
    // }
    
    // YCbCrへの変換(整数)
    for(int i = 0; i < height; i++){
        for(int j = 0; j < width; j++){
            for(int k = 0; k < 3; k++){
                ycbcr_cnv[0][i][j] += ycbcr[0][k] * imgin[k][i][j];
                ycbcr_cnv[1][i][j] += ycbcr[1][k] * imgin[k][i][j];
                ycbcr_cnv[2][i][j] += ycbcr[2][k] * imgin[k][i][j];
            }
        }
    }

    // 四捨五入
    for(int k = 0; k < 3; k++){
        for(int i = 0; i < height; i++){
            for(int j = 0; j < width; j++){
                if(ycbcr_cnv[k][i][j] >= 0){
                    ycbcr_cnv[k][i][j] += 0.5;
                    ycbcr_cnv[k][i][j] = (int)ycbcr_cnv[k][i][j];
                }else if(ycbcr_cnv[k][i][j] < 0){
                    ycbcr_cnv[k][i][j] -= 0.5;
                    ycbcr_cnv[k][i][j] = (int)ycbcr_cnv[k][i][j];
                }
            }
        }
    }

    // CbとCrにオフセット加算
    for(int k = 1; k < 3; k++){
        for(int i = 0; i < height; i++){
            for(int j = 0 ; j < width; j++){
                ycbcr_cnv[k][i][j] += 128;
            }
        }
    }

    // 1バイト外数値時修正処理
    for(int i = 0; i < 3; i++){
        for(int j = 0; j < height; j++){
            for(int k = 0; k < width; k++){
                if(ycbcr_cnv[i][j][k] >= 255){
                    ycbcr_cnv[i][j][k] = 255;
                }else if(ycbcr_cnv[i][j][k] <= 0){
                    ycbcr_cnv[i][j][k] = 0;
                }
            }
        }
    }

    // imginへの上書き処理
    for(int i = 0; i < 3; i++){
        for(int j = 0; j < height; j++){
            for(int k = 0; k < width; k++){
                imgin[i][j][k] = (int)ycbcr_cnv[i][j][k];
            }
        }
    }
    
    // 出力
    // printf("<入力信号(YCbCr)>\n");
    // for(int i = 0; i < 3; i++){
    //     switch(i){
    //         case 0:{
    //             printf("--- Y ---\n");
    //             break;
    //         }
    //         case 1:{
    //             printf("--- Cb ---\n");
    //             break;
    //         }
    //         case 2:{
    //             printf("--- Cr ---\n");
    //             break;
    //         }
    //     }
    //     for(int j = 0; j < height; j++){
    //         for(int k = 0; k < width; k++){
    //             printf("%.2X ",imgin[i][j][k]);
    //         }
    //         putchar('\n');
    //     }
    // }
    putchar('\n');
}

void processing(){
    // 明度レベルカウンタ
    double brightness[256] = {0};
    double bright_conv[256] = {0};
    int max[2] = {0};

    for(int i = 0; i < 3; i++){
        // コピーを行う
        for(int j = 0; j < height; j++){
            for(int k = 0; k < width; k++){
               
                if(i == 0){

                    // 明度レベル毎のカウントを行う
                    for(int l = 0; l < 256; l++){
                        // 明度カウント処理
                        if(imgin[i][j][k] == l){
                            brightness[l]++;
                        }
                    }
                }

                // 画像コピーを行う
                imgout[i][j][k] = imgin[i][j][k];
            }
        }
    }

    // 最大度数算出
    for(int i = 0; i < 256; i++){
        if(brightness[i] > max[0]){
            // 最大度数と添字を格納
            max[0] = brightness[i];     // 最大度数
            max[1] = i;                 // 最大度数の添字
        }
    }

    // 正規化処理
    for(int i = 0; i < 256; i++){
        bright_conv[i] = (brightness[i] / max[0]) * 100;
        
        // 四捨五入
        bright_conv[i] += 0.5;
        bright_conv[i] = (int)bright_conv[i];
    }

    // ヒストグラム描画処理
    for(int j = 0; j < height; j++){
        for(int k = 0; k < width; k++){
            // ヒストグラム範囲設定
            if( j > height - 100 && k < 256){
                
                // グラフ描画
                if( height - j < (int)bright_conv[k]){
                    // グラフ色：赤
                    imgout[0][j][k] = 0x00;
                    imgout[1][j][k] = 0x80;
                    imgout[2][j][k] = 0xff;
                }else{
                    // グラフ背景：黒
                    imgout[0][j][k] = 0x00;
                    imgout[1][j][k] = 0x80;
                    imgout[2][j][k] = 0x80;
                }
            }
        }
    }


    // 出力処理
    printf("＜最大度数＞\n");
    printf("画素値%4d : %5d\n\n",max[1], max[0]);

    printf("＜度数表＞\n");
    for(int i = 0; i < 256; i++){
        printf("画素値%4d : %5.0f --> %4.0f\n", i, brightness[i], bright_conv[i]);
    }
    
}

void ybr_to_rgb(){
    // RGB変換(整数)
    // printf("<出力信号(YCbCr)>\n");
    // printf("--- Y ---\n");
    // for(int i = 0; i < height; i++){
    //     for(int j = 0; j < width; j++){
    //         printf("%.2X ",imgin[0][i][j]);
    //     }
    //     putchar('\n');
    // }
    // printf("--- Cb ---\n");
    // for(int i = 0; i < height; i++){
    //     for(int j = 0; j < width; j++){
    //         printf("%.2X ",imgin[1][i][j]);
    //     }
    //     putchar('\n');
    // }
    // printf("--- Cr ---\n");
    // for(int i = 0; i < height; i++){
    //     for(int j = 0; j < width; j++){
    //         printf("%.2X ",imgin[2][i][j]);
    //     }
    //     putchar('\n');
    // }
    // putchar('\n');


    // オフセット加算値減算
    short tmp[3][512][512] = {};
    for(int i = 0; i < 3; i++){
        for(int j = 0; j < height; j++){
            for(int k = 0; k < width; k++){
                tmp[i][j][k] = imgout[i][j][k];
            }
        }
    }
    for(int i = 1; i < 3; i++){
        for(int j = 0; j < height; j++){
            for(int k = 0; k < width; k++){
                tmp[i][j][k] = tmp[i][j][k] - 128.0;
            }
        }
    }

    
    // RGB変換
    for(int i = 0; i < height; i++){
        for(int j = 0; j < width; j++){
            for(int k = 0; k < 3; k++){
                rgb_cnv[0][i][j] += rgb[0][k] * tmp[k][i][j];
                rgb_cnv[1][i][j] += rgb[1][k] * tmp[k][i][j];
                rgb_cnv[2][i][j] += rgb[2][k] * tmp[k][i][j];
            }
        }
    }

    // 四捨五入
    for(int i = 0; i < 3; i++){
        for(int j = 0; j < height; j++){
            for(int k = 0; k < width; k++){
                if(rgb_cnv[i][j][k] >= 0){
                    rgb_cnv[i][j][k] += 0.5;
                }else if(rgb_cnv[i][j][k] < 0){
                    rgb_cnv[i][j][k] -= 0.5;
                }
                rgb_cnv[i][j][k] = (int)rgb_cnv[i][j][k];
            }
        }
    }

    // 1バイト範囲外値修正処理
    for(int i = 0; i < 3; i++){
        for(int j = 0; j < height; j++){
            for(int k = 0; k < width; k++){
                if(rgb_cnv[i][j][k] > 255){
                    rgb_cnv[i][j][k] = 255;
                }else if(rgb_cnv[i][j][k] < 0){
                    rgb_cnv[i][j][k] = 0;
                }
            }
        }
    }

    // rgb_cnv 2 imgout
    for(int i = 0; i < 3; i++){
        for(int j = 0; j < height; j++){
            for(int k = 0; k < width; k++){
                imgout[i][j][k] = rgb_cnv[i][j][k];
            }
        }
    }

    // 出力
    // printf("<出力信号(RGB)>\n");
    // for(int i = 0; i < 3; i++){
    //     switch(i){
    //         case 0:{
    //             printf("--- R ---\n");
    //             break;
    //         }
    //         case 1:{
    //             printf("--- G ---\n");
    //             break;
    //         }
    //         case 2:{
    //             printf("--- B ---\n");
    //             break;
    //         }
    //     }
    //     for(int j = 0; j < height; j++){
    //         for(int k = 0; k < width; k++){
    //             printf("%.2X ",imgout[i][j][k]);
    //         }
    //         putchar('\n');
    //     }
    // }
}

void put_data(){
    char n_fname[20];
    FILE *fp;
    printf("出力画像データを作成しました.\n\n");
    printf("ファイル名を入力:");
    scanf("%s",n_fname);
    fp=fopen(n_fname,"wb");
    if(fp==NULL){
        printf("ファイルをオープンできません\n");
        exit (1);
    }
    printf("ファイルをオープンしました\n");
    for(int i = 0; i < 54; i++){
        fputc(header[i],fp);
    }
    for(int i = height - 1; i >= 0; i--){
        for(int j = 0; j < width; j++){
            for(int k = 2; k >= 0; k--){
                fputc(imgout[k][i][j],fp );
            }
        }
    }
    fclose(fp);
    printf("ファイルをクローズしました\n");
}
u306065@cse-ssh2[32]: gcc -Wall 09-B-01.c
u306065@cse-ssh2[33]: ./a.out
入力ファイル名を入力してください：goldhill.bmp
ファイルをオープンしました.

<ファイルサイズ>
header[2] = 38 header[3] = 00 header[4] = 0c header[5] = 00 
786488バイト

<オフセット>
header[10] = 36 header[11] = 00 header[12] = 00 
54バイト

<画像の幅>
header[18] = 00 header[19] = 02 header[20] = 00 header[21] = 00 
512画素

<画像の高さ>
header[22] = 00 header[23] = 02 header[24] = 00 header[25] = 00 
512ライン

<1画素あたりのビット数>
header[28] = 18 header[29] = 00 
30ビット

<挿入ビット数>
2バイト


＜最大度数＞
画素値 119 :  2618

＜度数表＞
画素値   0 :     0 -->    0
画素値   1 :     0 -->    0
画素値   2 :     0 -->    0
画素値   3 :     0 -->    0
画素値   4 :     0 -->    0
画素値   5 :     0 -->    0
画素値   6 :     0 -->    0
画素値   7 :     0 -->    0
画素値   8 :     0 -->    0
画素値   9 :     0 -->    0
画素値  10 :     0 -->    0
画素値  11 :     0 -->    0
画素値  12 :     0 -->    0
画素値  13 :     0 -->    0
画素値  14 :     0 -->    0
画素値  15 :     0 -->    0
画素値  16 :     3 -->    0
画素値  17 :     3 -->    0
画素値  18 :     8 -->    0
画素値  19 :    14 -->    1
画素値  20 :    34 -->    1
画素値  21 :    51 -->    2
画素値  22 :   100 -->    4
画素値  23 :   159 -->    6
画素値  24 :   235 -->    9
画素値  25 :   283 -->   11
画素値  26 :   390 -->   15
画素値  27 :   430 -->   16
画素値  28 :   543 -->   21
画素値  29 :   577 -->   22
画素値  30 :   607 -->   23
画素値  31 :   609 -->   23
画素値  32 :   587 -->   22
画素値  33 :   601 -->   23
画素値  34 :   540 -->   21
画素値  35 :   512 -->   20
画素値  36 :   505 -->   19
画素値  37 :   560 -->   21
画素値  38 :   568 -->   22
画素値  39 :   622 -->   24
画素値  40 :   704 -->   27
画素値  41 :   847 -->   32
画素値  42 :   966 -->   37
画素値  43 :  1048 -->   40
画素値  44 :  1134 -->   43
画素値  45 :  1237 -->   47
画素値  46 :  1321 -->   50
画素値  47 :  1417 -->   54
画素値  48 :  1538 -->   59
画素値  49 :  1536 -->   59
画素値  50 :  1582 -->   60
画素値  51 :  1601 -->   61
画素値  52 :  1576 -->   60
画素値  53 :  1690 -->   65
画素値  54 :  1651 -->   63
画素値  55 :  1671 -->   64
画素値  56 :  1683 -->   64
画素値  57 :  1719 -->   66
画素値  58 :  1627 -->   62
画素値  59 :  1696 -->   65
画素値  60 :  1662 -->   63
画素値  61 :  1603 -->   61
画素値  62 :  1645 -->   63
画素値  63 :  1696 -->   65
画素値  64 :  1690 -->   65
画素値  65 :  1730 -->   66
画素値  66 :  1811 -->   69
画素値  67 :  1802 -->   69
画素値  68 :  1900 -->   73
画素値  69 :  1869 -->   71
画素値  70 :  1832 -->   70
画素値  71 :  1912 -->   73
画素値  72 :  1871 -->   71
画素値  73 :  1948 -->   74
画素値  74 :  1993 -->   76
画素値  75 :  1935 -->   74
画素値  76 :  2046 -->   78
画素値  77 :  1983 -->   76
画素値  78 :  1958 -->   75
画素値  79 :  1905 -->   73
画素値  80 :  1943 -->   74
画素値  81 :  1920 -->   73
画素値  82 :  1880 -->   72
画素値  83 :  1959 -->   75
画素値  84 :  2001 -->   76
画素値  85 :  1999 -->   76
画素値  86 :  1925 -->   74
画素値  87 :  1973 -->   75
画素値  88 :  1975 -->   75
画素値  89 :  1900 -->   73
画素値  90 :  1981 -->   76
画素値  91 :  2079 -->   79
画素値  92 :  2014 -->   77
画素値  93 :  2014 -->   77
画素値  94 :  2038 -->   78
画素値  95 :  2096 -->   80
画素値  96 :  2156 -->   82
画素値  97 :  2128 -->   81
画素値  98 :  2142 -->   82
画素値  99 :  2177 -->   83
画素値 100 :  2127 -->   81
画素値 101 :  2306 -->   88
画素値 102 :  2263 -->   86
画素値 103 :  2307 -->   88
画素値 104 :  2296 -->   88
画素値 105 :  2365 -->   90
画素値 106 :  2356 -->   90
画素値 107 :  2394 -->   91
画素値 108 :  2474 -->   94
画素値 109 :  2491 -->   95
画素値 110 :  2431 -->   93
画素値 111 :  2400 -->   92
画素値 112 :  2477 -->   95
画素値 113 :  2560 -->   98
画素値 114 :  2482 -->   95
画素値 115 :  2492 -->   95
画素値 116 :  2480 -->   95
画素値 117 :  2511 -->   96
画素値 118 :  2488 -->   95
画素値 119 :  2618 -->  100
画素値 120 :  2442 -->   93
画素値 121 :  2375 -->   91
画素値 122 :  2367 -->   90
画素値 123 :  2330 -->   89
画素値 124 :  2264 -->   86
画素値 125 :  2180 -->   83
画素値 126 :  2058 -->   79
画素値 127 :  2031 -->   78
画素値 128 :  1988 -->   76
画素値 129 :  1848 -->   71
画素値 130 :  1796 -->   69
画素値 131 :  1710 -->   65
画素値 132 :  1635 -->   62
画素値 133 :  1505 -->   57
画素値 134 :  1523 -->   58
画素値 135 :  1414 -->   54
画素値 136 :  1277 -->   49
画素値 137 :  1344 -->   51
画素値 138 :  1315 -->   50
画素値 139 :  1297 -->   50
画素値 140 :  1232 -->   47
画素値 141 :  1173 -->   45
画素値 142 :  1263 -->   48
画素値 143 :  1240 -->   47
画素値 144 :  1195 -->   46
画素値 145 :  1147 -->   44
画素値 146 :  1172 -->   45
画素値 147 :  1129 -->   43
画素値 148 :  1087 -->   42
画素値 149 :  1079 -->   41
画素値 150 :  1117 -->   43
画素値 151 :  1041 -->   40
画素値 152 :   996 -->   38
画素値 153 :  1013 -->   39
画素値 154 :   955 -->   36
画素値 155 :   943 -->   36
画素値 156 :   896 -->   34
画素値 157 :   872 -->   33
画素値 158 :   854 -->   33
画素値 159 :   819 -->   31
画素値 160 :   825 -->   32
画素値 161 :   777 -->   30
画素値 162 :   827 -->   32
画素値 163 :   742 -->   28
画素値 164 :   712 -->   27
画素値 165 :   714 -->   27
画素値 166 :   710 -->   27
画素値 167 :   647 -->   25
画素値 168 :   658 -->   25
画素値 169 :   666 -->   25
画素値 170 :   661 -->   25
画素値 171 :   615 -->   23
画素値 172 :   602 -->   23
画素値 173 :   511 -->   20
画素値 174 :   500 -->   19
画素値 175 :   497 -->   19
画素値 176 :   463 -->   18
画素値 177 :   441 -->   17
画素値 178 :   430 -->   16
画素値 179 :   449 -->   17
画素値 180 :   458 -->   17
画素値 181 :   399 -->   15
画素値 182 :   431 -->   16
画素値 183 :   426 -->   16
画素値 184 :   448 -->   17
画素値 185 :   424 -->   16
画素値 186 :   406 -->   16
画素値 187 :   399 -->   15
画素値 188 :   415 -->   16
画素値 189 :   398 -->   15
画素値 190 :   403 -->   15
画素値 191 :   436 -->   17
画素値 192 :   439 -->   17
画素値 193 :   443 -->   17
画素値 194 :   455 -->   17
画素値 195 :   444 -->   17
画素値 196 :   469 -->   18
画素値 197 :   525 -->   20
画素値 198 :   501 -->   19
画素値 199 :   548 -->   21
画素値 200 :   479 -->   18
画素値 201 :   489 -->   19
画素値 202 :   433 -->   17
画素値 203 :   445 -->   17
画素値 204 :   472 -->   18
画素値 205 :   494 -->   19
画素値 206 :   455 -->   17
画素値 207 :   465 -->   18
画素値 208 :   429 -->   16
画素値 209 :   396 -->   15
画素値 210 :   387 -->   15
画素値 211 :   399 -->   15
画素値 212 :   352 -->   13
画素値 213 :   340 -->   13
画素値 214 :   343 -->   13
画素値 215 :   266 -->   10
画素値 216 :   276 -->   11
画素値 217 :   257 -->   10
画素値 218 :   303 -->   12
画素値 219 :   280 -->   11
画素値 220 :   274 -->   10
画素値 221 :   320 -->   12
画素値 222 :   382 -->   15
画素値 223 :   440 -->   17
画素値 224 :   505 -->   19
画素値 225 :   689 -->   26
画素値 226 :   889 -->   34
画素値 227 :  1037 -->   40
画素値 228 :  1068 -->   41
画素値 229 :  1335 -->   51
画素値 230 :  1447 -->   55
画素値 231 :  1370 -->   52
画素値 232 :  1193 -->   46
画素値 233 :   927 -->   35
画素値 234 :   546 -->   21
画素値 235 :   532 -->   20
画素値 236 :     0 -->    0
画素値 237 :     0 -->    0
画素値 238 :     0 -->    0
画素値 239 :     0 -->    0
画素値 240 :     0 -->    0
画素値 241 :     0 -->    0
画素値 242 :     0 -->    0
画素値 243 :     0 -->    0
画素値 244 :     0 -->    0
画素値 245 :     0 -->    0
画素値 246 :     0 -->    0
画素値 247 :     0 -->    0
画素値 248 :     0 -->    0
画素値 249 :     0 -->    0
画素値 250 :     0 -->    0
画素値 251 :     0 -->    0
画素値 252 :     0 -->    0
画素値 253 :     0 -->    0
画素値 254 :     0 -->    0
画素値 255 :     0 -->    0
出力画像データを作成しました.

ファイル名を入力:hist_test.bmp
ファイルをオープンしました
ファイルをクローズしました
u306065@cse-ssh2[34]: exit
exit

Script done on Fri Dec 13 01:01:35 2019
